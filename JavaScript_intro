<!--2021.12.9(목) 10h-->
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>JavaScript 개요</title>
    <script src="resources/js/sample.js"></script> <!--JavaScript 외부 방식 = 내가 가져다 쓸 외부 .js 파일을 script 태그의 src 속성으로 연결지어줌-->
</head>
<body>
    <!--웹 frontend의 3요소
        1. HTML: 웬 문서의 큰 틀/뼈대
        2. CSS: 스타일(색상, 테두리, 디자인 등)
        3. JavaScript: 웹 문서 상에 이벤트(사용자의 행위 등)가 발생했을 때 추가적으로 실행해야 하는 동작들 처리 -> 동적인 효과
         cf. Java 프로그래밍 언어와는 무관함-->

    <h1>JavaScript 개요</h1>
    <h3>1. Script(스크립트) 언어란?</h3>
    <p>
        - 프로그램의 동작을 사용자의 요구에 맞게 수행되도록 해줌<br>
        - 매우 빠르게 배우고, 짧은 소스코드로 상호작용하도록 고안됨
    </p>
    
    <hr>
    <h3>2. JavaScript란?</h3>
    <p>
        - 웹 브라우저에서 가장 많이 + 가장 기본적으로 사용되는 '인터프리터 방식'의 스트립트 언어 e.g. JavaScript<br>
        - 인터프리터 방식: 컴파일 단계를 거치지 않고 곧바로 실행됨 -> 브라우저에서 html 문서가 로딩될 때 코드를 한 줄씩 읽어내는 방식<br>
        <br><br>

        cf. 컴파일 방식: 소스코드 작성 후 컴파일 단계를 거쳐야만 실행 가능/컴파일 단계를 거치고 나서 실행됨 e.g. Java<br>
            장점: 컴파일 시 컴파일 에러가 떠서 문제 발생하는 부분을 서비스 실행 전에 알 수 있음 -> 오류 잡기 수월<br><br>
        <!--Java는 사실 컴파일 + 인터프리터 방식 -> 소스코드를 한 번 다 읽어내고 나서 컴파일 후 (소스코드 1줄씩 읽어내며) 프로그램이 실행됨 -> 코드 상의 문법적인 오류가 있으면 바로 빨간줄로 알려줌 -> 나의 질문 = 이클립스에서 코드 작성 시 빨간줄 뜨는 건 코드 쓰면서 바로 컴파일이 되는 것인가?
            인터프리터 방식: 실행되면서 소스코드를 1줄씩 읽어내면서 바로 실행; 실시간으로 텍스트를 분석해서 실행됨 -> 코드 상에 문법적인 문제가 있다면 바로 알려주지 않고 실행시점에서 알려줌 -> Java에 비해 오류 찾기가 힘들 수 있음-->
    </p>

    <hr>
    <h3>3. 장/단점</h3>
    <h4>장점</h4>
    <ul>
        <li>요소에 이벤트가 발생했을 때 코드를 1줄씩 읽어나가면서 수행되기 때문에 수행 속도가 빠름</li>
        <li>간단한 코드 작성(단순한 구조 및 원칙)으로 초보자가 접하기 쉬운 언어
            e.g. 접근제한자 개념 없음,
                 메소드 정의 시 반환형 정의 안 함,
                 변수 선언 시 자료형 지정할 필요 없음 -> 타입 추론
        </li>
    </ul>

    <h4>단점</h4>
    <ul>
        <li>웹에 특화된 기술 -> 내부에서 제공되는 기술이 제한적임</li> <!--JavaScript로 웹 외 다른 서비스를 만들 수는 있으나, 성능(?)이 좋지는 않음-->
        <li>HTML 문서 내에 소스코드를 작성하기 때문에 개발자 도구를 이용해서 외부에 공개됨 -> 보안에 취약점이 있음</li>
    </ul>

    <hr>
    <h3>4. JavaScript 소스코드 작성 위치에 따른 방법 종류</h3>
    <ol>
        <li>inline(인라인) 방식: 이벤트 부여하고자 하는 요소 내에 간단한 소스코드 작성해서 실행되게 하는 방법</li>
        <li>internal(내부) 방식: 해당 html 문서 내 script 태그(head, body 등 어디에 + 여러 군데에 써도 됨) 영역에 소스코드 작성해서 실행되게 하는 방법</li>
        <li>external(외부) 방식: 소스코드들을 별도의 .js 파일로 작성해서 script 태그를 가져다가 실행되게 하는 방법</li>
    </ol>
    <br>

    <h4>1) inline 방식</h4>
    <p>
        - 태그 내에 직접적으로 실행할 간단한 소스코드를 작성해서 실행시킴<br>
        - 실행해야 하는 소스코드가 매우 소량일 경우 주로 사용<br>

        - 표현법<br>
        <태그명 이벤트속성="해당 태그에 해당 이벤트가 발생했을 때 실행할 소스코드">
    </p>

    <!--버튼이 click되는 순간(=click 이벤트가 발생하는 순간) 알림창 띄우기-->
    <button onclick="window.alert('how are you doing today? ^^')">알림창 출력</button> <!--window = 브라우저; alert() 메소드 안에 텍스트 입력 -> 그 텍스트가 브라우저의 알림창에 표시됨-->
    <!--버튼이 click되는 순간(=click 이벤트가 발생하는 순간) 콘솔창(개발자 도구 탭 -> 주로 debugging할 용도)에 메시지 출력-->
    <button onclick="console.log('안녕하세요, 콘솔창입니다~')">콘솔창 출력</button>
    
    <br>
    <h4>2) internal(내부) 방식</h4>
    <p>
        - script 태그 영역(=JavaScript의 영역)에 함수 단위로 소스코드들을 작성해두고, 어떤 요소에 어떤 이벤트 발생 시 그 해당 함수를 호출함으로써 실행시키는 방식<br>
        - script 태그는 head, body 태그 내에 다 작성 가능
    </p>

    <!--inline 방식 + 내부 방식 -> 버튼이 click되는 순간(=click 이벤트가 발생하는 순간) 알림창 띄우기-->
    <button onclick="abc()">알림창 출력</button> <!--버튼 클릭 시 abc() 함수(function)(o) 메소드(x)가 호출됨-->

    <!--순수 내부 방식 -> 콘솔창 출력하는 버튼-->
    <button id="btn">콘솔창 출력</button>

    <script>
        // JavaScript 소스코드 기술할 수 있는 영역
        /* 여러
           줄
           주석*/
        
        // Java의 메소드 = 접근제한자 예약어 메소드명(매개변수) {}

        // 매개변수가 없는 단순한 함수 만들어보기: abc라는 이름을 가진 함수 정의 cf. 이렇게 이름 정의한 함수 = 선언적 함수
        function abc() { // 이건 함수
            // 이/해당 함수를 호출 시 실행할 코드 기술
            window.alert('have a lovely, happy day!'); // 이건 메소드; " " 또는 ' ' 모두 사용/실행 가능
        }; // ;(세미콜론) 적어도 되고 안 적어도 실행됨 -> 회사마다 convention 다름 e.g. script 영역의 맨 끝에 나오는 함수 영역 종료 시에만 ; 생략 등

        // 순수 내부 방식으로 이벤트 부여
        // 단계1) 이벤트를 적용시키고자 하는 요소/태그를 가지고 오기
        var btn = document.getElementById('btn'); // 이 html 문서에 있는, () 안의 id를 가진 요소를 가지고 옴 -> 이 요소를 어딘가에 사용/재활용하기 위해 변수를 만들어 거기에 담아줌/대입함

        // 단계2) 선택된 요소의 이벤트 속성에 접근해서 해당 이벤트 발생 시 실행할 함수를 대입
        btn.onclick = function() { // 익명 함수 = 이름이 없는 함수 -> 해당 이벤트 발생 시 실행됨; (굳이 따지자면) btn.onclick은 Java의 필드; '='는 대입 연산자 -> 함수 function()을 onclick에 대입해줌
            // 이/해당 함수를 호출 시 실행할 코드 기술
            console.log("참 신기하네요 @.@");
            abc(); // 미리 정의된 선언적 함수를 함수 내부에서 호출 가능
            cba(); // (정의한 적) 없는 함수 호출 시 오류 발생 -> 브라우저 개발자 도구 'console 탭'에서 오류 내용 확인 가능 
        }
    </script>

    <h4 onclick="window.alert('꼭 버튼 클릭이 아니어도 됨');">3) external(외부) 방식</h4> <!--inline 방식; 나의 질문 = alert() 마치며 ; 어디에 붙이는 게 맞는가? 생략 가능한가?(필기 시에도 정확하게 못 따라 쓴 것 같음 ㅠ.ㅠ)-->
    <p>
        별도의 .js 파일로 소스코드를 작성하고, 해당 html 문서에 가져다가 실행하는 방법
    </p>

    <!--외부 방식 + inline 방식-->
    <button onclick="test()";>알림창 출력</button>    
</body>
</html>
