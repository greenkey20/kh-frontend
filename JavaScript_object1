<!--2021.12.16(목) 16h15-->
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>객체2</title>
    <style>
        .area {
            background-color: rgb(203, 241, 203);
            border: 1px solid green;
            height: 300px;
        }
    </style>
</head>
<body>
    <h1>객체2</h1>
    <h3>배열에 객체(들) 넣기 -> 객체 배열을 이용한 다량의 데이터 관리</h3>
    <!--데이터를 관리하는 자료 구조로써 객체 및 배열을 생각하자..
        JavaScript의 객체 = Java의 HashMap
        JavaScript의 배열 = Java의 ArrayList
    
        JavaScript에는 자료형이 없는 바, 다형성 사용x-->

    <button onclick="test1()">실행 확인</button>
    <div id="area1" class="area"></div>

    <script>
        function test1() {
            // 학생 객체 생성
            var student0 = {name:'해피',java:99,oracle:80,jdbc:80,frontend:95};
            var student1 = {name:'판다',java:95,oracle:70,jdbc:90,frontend:90};
            var student2 = {name:'미피',java:50,oracle:80,jdbc:100,frontend:80};
            var student3 = {name:'토미',java:60,oracle:90,jdbc:85,frontend:100};

            // 학생 객체를 담을 (빈)배열 생성
            var students = [];

            /* 배열에 객체 추가
               Java의 ArrayList 요소 추가 시 add(추가하고자 하는 요소)
               JavaScript의 배열에 값 추가 시 push, unshift -> 순차적으로 넣어서 관리하고자 한다면 push가 더 적합함*/
            students.push(student0); // students 배열의 0번 index에 요소 추가
            students.push(student1); // students 배열의 1번 index에 요소 추가
            students.push(student2); // students 배열의 2번 index에 요소 추가
            students.push(student3); // students 배열의 3번 index에 요소 추가

            console.log(students); // (4) [{…}, {…}, {…}, {…}]
            console.log(students[2].jdbc); // students 배열 2번 index에 있는 학생의 jdbc 점수(속성 값) 확인

            // 객체들에 javascript:100 속성 및 속성값 추가 + 합계 및 평균 구해주는 기능 추가
            // 방법1) for문 사용하지 않는 방법
            /*
            student0.javascript = 100;
            student0.getSum = function() {
                return this.java + this.oracle + this.jdbc + this.frontend + this.javascript;
            }
            student0.getAvg = function() {
                return this.getSum() / 5;
            }

            student1.javascript = 100;
            student1.getSum = function() {
                return this.java..
            }
            */

            // 방법2) for문 사용 = 배열 사용하는 중요 이유
            for (var i in students) {
                students[i].javascript = 100;
                students[i].getSum = function() { // 속성명(getSum)이 function의 이름이 되므로, 메소드를 표시하는 ()를 getSum에 붙이지 않고 속성 값 부여
                    return this.java + this.oracle + this.jdbc + this.frontend + this.javascript;
                }
                students[i].getAvg = function() {
                    return this.getSum() / 5;
                }
            }
            
            // 2021.12.16(목) 17h
            // 학생들의 이름, 총점, 평균 출력
            var area1 = document.getElementById('area1');

            for (var i in students) {
                area1.innerHTML += students[i].name + '의 총점 : ' + students[i].getSum() + ', 평균 : ' + students[i].getAvg() + '<br>';
            }            
        }
    </script> 

    <hr>
    <h3>생성자 함수</h3>
    <!--Java에서 객체 생성 시 new(heap 메모리 영역 할당하는 키워드) 생성자(constructor) 메소드(); -> 매개변수 자리 비어있는 기본생성자 ou 원하는 매개변수 넣어 오버라이딩한 매개변수 생성자
        매개변수로 받아온 값들로 필드 값 초기화-->
    <p>
        JavaScript의 생성자 = new 키워드 사용해서 객체 생성할 수 있는 함수<br>
        <!--현재까지 수업시간에서 사용해본 생성자: (빈)배열 생성 시 new Array();-->
        생성자의 함수명을 만들 때 첫 글자를 대문자로 함 = 관례/개발자들끼리의 약속
    </p>

    <button onclick="test2();">실행 확인</button>
    <div id="area2" class="area"></div>

    <script>
        function test2() {

            // 생성자 함수의 이해를 돕기 위한 예시
            // document.getElementById('area2').innerHTML += abc("스노크메이든") + '<br>'; // [object Object]

            function abc(name) {
                d = {}; // 빈 객체 d가 있음
                d.name = name; // 객체 d의 name 속성의 값을 name으로 받아온 값으로 초기화
                return d;
            }

            // 2021.12.17(금) 9h
            /* Java에서 Student 클래스의 객체 생성 <- new(heap 메모리 영역에 할당) Student('강해피', 95, 91, 93, 87, 89)(매개변수 있는 생성자);
            Java에서는 아래와 같이 속성/필드들을 가진 Student 클래스가 존재함
            class Student {
                String name;
                int java;
                int oracle;
                int jdbc;
                int frontend;
                int javascript;
            }
            */

            var student0 = new Student('강해피', 95, 91, 93, 87, 89);
            /* 생성자 함수 내부에서는 아래와 같이 this 객체가 생성되고, 이 this 객체를 반환해줌 -> 이 객체를 student0 변수에 담음
               this = {
                    name : '강해피',
                    java : 95,
                    oracle : 91,
                    jdbc : 93,
                    frontend : 87,
                    javascript : 89,

                    getSum : function() {},
                    getAvg : function() {},
                    toString : function() {}
               }
            */
            var student1 = new Student('강무민', 90, 70, 80, 50, 40);
            var student2 = new Student('강스노크메이든', 60, 100, 90, 50, 80);

            // 생성자 함수를 이용해서 만든 객체가 잘 만들어졌는지 console에 띄워 확인하기
            console.log(student0); // Student {name: '강해피', java: 95, oracle: 91, jdbc: 93, frontend: 87, …}

            // 생성자 함수를 이용해서 만든 객체들을 배열에 담기
            var students = [student0, student1, student2];
            console.log(students); // (3) [Student, Student, Student] <- 생성자 함수로 만든 객체는 이렇게 찍힘

            // 반복문 이용해서 출력
            for (var i in students) {
                document.getElementById('area2').innerHTML += students[i] + '<br>';
            }
        }

        // 생성자 함수 -> arguments(인자)로 받아온 값들로 속성 값 초기화
        function Student(name, java, oracle, jdbc, frontend, javascript) { // 매개변수
            // this = {}; // 내 눈에 보이진 않지만/명시적으로 쓰는 코드는 아니지만, this라는 빈 객체가 알아서 생김

            // 객체의 속성 (추가 및) 초기화
            this.name = name; // this라는 객체의 name 속성 추가 + 매개변수로 받아온 값으로 name 속성의 값 초기화
            this.java = java;
            this.oracle = oracle;
            this.jdbc = jdbc;
            this.frontend = frontend;
            this.javascript = javascript;                

            // 메소드 속성 정의
            this.getSum = function() {  // this라는 객체의 getSum 속성 추가 + getSum 속성 값은 우항 function() {}과 같이 생김
                return this.java + this.oracle + this.jdbc + this.frontend + this.javascript;
            }

            this.getAvg = function() {
                return this.getSum() / 5;
            }

            // toString() 만들기
            this.toString = function() {
                return '이름 : ' + this.name + ', 총점  : ' + this.getSum() + ', 평균 : ' + this.getAvg();
            }

            /* 위와 같이 객체 속성 초기화/정의하면 아래와 같이 객체 생성되는 것
            this = {
                name : name,
                java : java,
                oracle : oracle,
                jdbc : jdbc,
                frontend : frontend,
                javascript : javascript,

                getSum : function() {},
                getAvg : function() {},
                toString : function() {}
            }
            */

            // return this; // return 시 this 객체의 속성들 값 초기화한 것 가지고 감/반환됨
        }
    </script>

    <!--2021.12.17(금) 10h10-->
    <hr>
    <h3>Date 객체</h3>
    <!--배열처럼, JavaScript에서 자체적으로 제공하는 (내장)객체-->
    <button onclick="test3();">실행 확인</button>
    <div id="area3" class="area"></div>

    <script>
        function test3() {
            var area3 = document.getElementById('area3');

            // new Date(); -> Date 객체 생성
            var date1 = new Date(); // 현재 날짜 및 시간; Fri Dec 17 2021 10:20:30 GMT+0900 (한국 표준시)

            // area에 출력
            area3.innerHTML += 'date1(현재 시각) : ' + date1 + '<br>';

            // 2022년 4월 4일(종강일)로 세팅하기
            var date2 = new Date(2022, 4-1, 4);
            // 월의 경우 내부적으로 +1이 되기 때문에 "세팅하고자 하는 해당 월 숫자 - 1"을 해줘야 함
            // 시, 분, 초를 지정 안 할 경우 0으로 자동 세팅
            area3.innerHTML += 'date2(종강일) : ' + date2 + '<br>'; // Mon Apr 04 2022 00:00:00 GMT+0900 (한국 표준시)

            // 2022년 4월 4일 시간까지 세팅하기
            var date3 = new Date(2022, 4-1, 4, 17, 50, 0);
            area3.innerHTML += 'date3(종강 시각) : ' + date3 + '<br>'; // Mon Apr 04 2022 17:50:00 GMT+0900 (한국 표준시)

            // ms(밀리초, JavaScript가 표시할 수 있는 최소 시간 단위)까지 세팅하기; 1초 = 1000ms -> 5000ms = 5초
            var date4 = new Date(2022, 4-1, 4, 17, 50, 0, 5000);
            area3.innerHTML += 'date4 : ' + date4 + '<br>'; // Mon Apr 04 2022 17:50:05 GMT+0900 (한국 표준시)

            // getFullYear() -> 연도만 알/뽑아내기
            area3.innerHTML += 'date1의 연도 : ' + date1.getFullYear() + '<br>';

            // getMonth() + 1 -> 월만 알/뽑아내기
            area3.innerHTML += 'date1의 월 : ' + (date1.getMonth() + 1) + '<br>'; // 12

            // getDate() -> 일만 알아내기
            area3.innerHTML += 'date1의 일 : ' + date1.getDate() + '<br>';

            // getDay() -> 요일만 알아내기; 일요일 0, 월요일 1, 화요일 2..
            area3.innerHTML += 'date1의 요일 : ' + date1.getDay() + '<br>'; // 금요일 5

            // getHours(): 시
            // getMinutes(): 분
            // getSeconds(): 초
            area3.innerHTML += 'date1의 시 : ' + date1.getHours() + '<br>';
            area3.innerHTML += 'date1의 분 : ' + date1.getMinutes() + '<br>';
            area3.innerHTML += 'date1의 초 : ' + date1.getSeconds() + '<br>';     
            
            // 종강일 d-day 구하기
            var end = new Date(2022, 4-1, 4);
            var now = new Date();
            area3.innerHTML += '종강일 d-day : ' + (end - now) + '<br>'; // 현재 날짜부터 종강 날짜까지 몇 milliseconds가 남았는지 알려줌 -> 9 293 146 528ms
            // ms -> d(날짜) 변환
            // 1s = 1000ms
            // 1m = 60s = 60 * 1000ms
            // 1h = 60m = 60 * 60 * 1000ms
            // 1d = 24hr = 24 * 60 * 60 * 1000ms
            var dday = (end -now) / (24 * 60 * 60 * 1000); // 107.55121233796297(일)
            alert('종강까지 '+ Math.ceil(dday) + '일 남았습니다~'); // dday 계산 결과를 올림해서 표시 -> 108(일)
        }
    </script>
    
</body>
</html>
