<!--2021.12.21(화) 14h25-->
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>jQuery 개요</title>
    <!-- <script src="../4_jQuery_workspace/resources/js/jquery-3.6.0.min.js"></script> -->
    <!--내가 있는 위치 내 폴더이므로(내가 잘 이해한건가?) resources/js/jquery-3.6.0.min.js로 경로 지정해도 됨-->

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.6.0/jquery.min.js"></script>
</head>
<body>
    <h1>jQuery 개요</h1>

    <h3>jQuery 소개</h3>
    <p>
        기존에 JavaScript 언어만으로 구현하기에 복잡했던 구문 작성을 간소화하기 위해 John Resig(존 레식)에 의해 개발된, JavaScript 기반의 library -> 유용한 함수나 내용들이 JavaScript 언어로 이미 만들어져/정의되어있는 모음집<br>
        cf. library: 유용한 기능들의 모음집 <!--api는 내가 구현을 해야 함 vs library는 갖다가 쓰기만 하면 됨--><br>
        <!--https://jquery.com/
            write less + do more = jQuery is a fast, small, and feature-rich JavaScript library.
            It makes things like HTML document traversal and manipulation, event handling, animation, and Ajax much simpler with an easy-to-use API that works across a multitude of browsers.
            With a combination of versatility and extensibility, jQuery has changed the way that millions of people write JavaScript.
            + api documentation(메소드들 설명 문서)-->

        <!--http(hypertext를 전송하기 위한 프로토콜) vs http secure(데이터가 암호화되어 전송됨 -> 중간에서 데이터를 가로채더라도 '도커(?)'라는 과정을 거쳐야 데이터를 읽을 수 있음; 서버 구축자/보안 담당자들이 하는 일)
            시중에 제공되는 웹서비스들은 다 https 사용; 단, 서비스 제공자가 https로 제공하고 있어야 함-->
    

        jQuery의 장점: 적은 양의 코드로 빠르고 풍부한 기능을 제공함 <!--쉬움-->
        1. DOM요소(document 객체)와 관련된 스크립트를 보다 쉽게 구현할 수 있음<br>
        2. ajax(비동기식 통신), 이벤트 처리 등을 폭넓게 지원함<br> <!--semi-project -->
        3. jQuery와 관련된 확장 플러그인, open API 등을 지원함<br> <!--jQuery의 점유 기간이 길었기 때문에-->

        단점: jQuery를 사용하면 속도가 느려짐 + jQuery보다 더 좋은(=어려움)/범용적인(많은 것을 할 수 있는) 개발도구들이 나옴 -> 점유율 낮아지고 있음
        cf. jQuery 4.0은 개혁해서 나온다고 하는데 나와바야 알 것..
    </p>

    <hr>
    <h3>jQuery 라이브러리 연결 방법</h3>
    <p>
        head 태그 내부에 script 태그로 jQuery 관련 .js 파일 가져오기<br> <!--JavaScript 파일로 만들어짐 -> 기본(작동원리?)은 JavaScript와 동일함-->     
        jQuery 공식 사이트: <a href="https://jquery.com/" target="_blank">새 탭에서 열기</a><br>
        <!--jQuery 다운로드 옵션
            1. compressed(개행, 띄어쓰기 등 용량 절약; 최소화한) production: 일반/배포용; 주석, 들여쓰기, 띄어쓰기 등을 최소화해서 파일의 용량을 줄인 버전; min.js 파일; library 파일 -> 일반적인 JavaScript 코드로 짰을 때보다 해석 시간 등 더 오래 소요됨(15h10 제대로 듣고 이해했는지 정확히 모르겠음 ㅠ.ㅠ)
            2. uncompressed development: 개발자를 위한/개발자용; 개발자 같은 사람이 보기 쉽도록 주석, 코드 정렬 등을 활용해서 가시/독성을 유지하는 파일; 일반 .js 파일

            major version -> patch 시 minor version..
    
            cf. 들여쓰기(code block), 주석, coding conventions 준수, 협업 방식 협조 중요 e.g. 변수명, 메소드/함수명 한글로 써도 프로그램 돌아가긴 하지만, 개발자들 간 영어로 쓰기로 했기 때문에 한글로 쓰면 안 됨-->
        
        오프/온라인 방식 있음<br>
        1. 오프라인 방식: jQuery 라이브러리 파일을 직접 다운로드 받은 후 경로 지정 -> .js 파일을 다운로드 받아 저장한 후 저장된 파일의 경로를 지정<br>
        2. 온라인 방식: CDN(content delivery network)을 통한 연결 -> 라이브러리를 제공하는 사이트 url을 제시해서 파일 경로로 지정; 인터넷 연결이 안 되면 사용 불가능
        <!--사용자가 netflix(OTT 서비스) 서버(물리적으로 멀리 떨어져있음)에 동영상 데이터 전송 요청함 ->  동영상 데이터는 용량이 커서 부분으로 나눠서 서버로부터 사용자에게 전송 + 사용자 가까이에 원래 서버의 복제품(=CDN) 같은 것 여러 개 있고, 거기서 데이터 보내줌-->
    </p>

    <hr>
    <h3>jQuery 구문 작성</h3>
    <p>
        <b>
            우리는 기본적으로 jQuery 구문으로 DOM 요소를 다룰 것이기 때문에, jQuery 명령은 문서 상에서 요소들이 전부 다 로드된 후에 실행되어야 함<br>
        </b>
    </p>

    <pre>
        순수 JavaScript에서 해당 내용의 표현법:
        window.onload = function() {
            실행 내용;
        }

        onload 함수: 페이지가 다 로딩되면 자동으로 1번 실행되는 함수
        특징1) 해당 html 문서의 요소들도 다 로드되고, 연동되어있는 외부 문서들도 다 로드된 다음에 실행됨        
        특징2) window.onload는 해당 html 문서에서 단 1번만 작성 가능함
    </pre>

    <script>
        /*
        window.onload = function() { // onload(이 창에서 전체 문서가 읽히면) = 이게 이벤트 요소(?)
            console.log('안녕하세요 ^^');
        }

        window.onload = function() { // 뒤에 나온 것 1개만 실행됨
            console.log('반갑습니다');
        }
        */
    </script>

    <!--2021.12.21(화) 16h-->
    <pre>
        jQuery에서의 해당 내용은 3가지 구문으로 제공됨
        표현법1: <!--문서에 대한 모든 정보는 document 객체가 가지고 있음-->
        jQuery(document).ready(function() { <!--jQuery를 사용할 것인데, 문서가 준비 완료되면 익명함수를 호출하겠다..-->
            실행 내용;
        })

        표현법2:
        $(document).ready(function() {
            실행 내용;
        })

        표현법3:
        $(function() {
            실행 내용;
        })

        $: jQuery 키워드를 나타냄

        jQuery에서 해당 function은 html 문서 내의 DOM 요소들만 로드되면 바로 실행됨
        여러 번 기술 가능함 + 횟수 제한 없음        
    </pre>

    <script>
        // 순수 JavaScript 방식
        /*
        window.onload = function() {
            console.log('문서 읽어들이기 완료');
        }
        */

        // jQuery 라이브러리 적용
        // 표현법1)
        jQuery(document).ready(function() {
            console.log('문서 읽어들이기 완료1');
        })

        // 표현법2)
        $(document).ready(function() {
            console.log('문서 읽어들이기 완료2');
        })

        // 표현법3)
        $(function() {
            console.log('문서 읽어들이기 완료3');

            // 16h20 실습 문제: 이 문서의 h3 요소 선택해서 배경색을 연두색으로 변경하기
            // 방법1) 순수 JavaScript 방식
            /*
            console.log(document.getElementsByTagName('h3')); // 이 요소객체를 console에 찍어보고, style 속성 등이 있는지 살펴보기; HTMLCollection(3) [h3, h3, h3]
            var h3Arr = document.getElementsByTagName('h3'); // h3 태그 요소객체는 여러 개일 수 있으며, 배열 형태로 받아옴 [h3, h3, h3, ..]
            for (var i = 0; i < h3Arr.length; i++) {
                h3Arr[i].style.backgroundColor = 'greenyellow';
            }
            */

            // 방법2) jQuery 라이브러리 적용 -> 쉽고 편리하고 코드 간결함
            $("h3").css("background", "yellowgreen");
            // $("선택자"): 해당 요소를 선택
            // .css(): 선택된 요소들의 스타일과 관련된 기능 수행

            // 16h35 실습 문제: 이 문서의 pre 태그에 대한 글자색을 forestgreen으로 변경하기
            // 방법1) 순수 JavaScript 방식
            /*
            console.log(document.getElementsByTagName('pre')); // HTMLCollection(2) [pre, pre]
            var preArr = document.getElementsByTagName('pre');
            for (var i = 0; i < preArr.length; i++) {
                preArr[i].style.color = 'forestgreen';
            }
            */

            // 방법2) jQuery 방식
            $('pre').css('color', 'yellowgreen'); // 우리나라에서는 ''(홑따옴표) vs 외국에서는 ""(쌍따옴표) 많이 씀
        })
    </script>
    
</body>
</html>
